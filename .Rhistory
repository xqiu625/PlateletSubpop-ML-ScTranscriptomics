221/18
18*12*25
5525-5145
200+45*3+30
365*6
2190/60
14135+13553
14135+13553-35000
7312-1200
8*6+9*3+(28-17)*4.5
124.5/28
4.5*18*5*4.5
4.5*18*5*4.5*4
4.5*5*12*18
4.5*6*12*18
4.5*5*12*18
3*12*18
4860+648
5525-5169
356/10
4.5*5
22.5+3
25.5/5
13664+444+20953
1703/2
tolower("DYNAMIC CHANGES IN HUMAN SINGLE CELL TRANSCRIPTIONAL SIGNATURES DURING FATAL SEPSIS")
tolower("PLATELETS IN IMMUNE DYSREGULATION: IDENTIFYING NOVEL PLATELET SUBTYPES IN SEVERE AND FATAL CASES OF COVID-19 AND SEPSIS")
len("VPEGITSICDAAFEGRSSLISVTFPATLTSIGNYAFCGCTSLRSITLPASLTSIGQEAFNGCSALASV")
nchar("VPEGITSICDAAFEGRSSLISVTFPATLTSIGNYAFCGCTSLRSITLPASLTSIGQEAFNGCSALASV")
nchar("CxxLxxIxLxxxLxxIxxxAF")
21/68
nchar(CTSLRSITLPASLTSI)
nchar("CTSLRSITLPASLTSI")
16/68
nchar("CTSLRSITLPASLTSI")/nchar("VPEGITSICDAAFEGRSSLISVTFPATLTSIGNYAFCGCTSLRSITLPASLTSIGQEAFNGCSALASV")
nchar("MKKKIFTLIMGLLLTALGAAAQNNGNAGPLTWNYNAGTKTLTITGTGAMPNYAYGGGTDRPWQTFKDEIETVTIGHGVTTVGQSAFTRCSKLQSITLPASLTKIGDHGFSFCTALQSIALPAALSEIGDYAFNECSALTAFEVDPGNARYTATDGVLYNKAKTSLRKYPAGKAATSFSVPAGVTYIGEYAFNAAAKLQSITLPAGVERIGEHAFHGCTTLQSIALPEGLTTIGKYAFHNCTALQSITLPASLTHIRNDAFSRCTALQSITLPAALTDIDGSAFFNCTALTAIGVDAGNARFTSADGVLYNKAKTELVRYPAGKPGTAFTVPAEVKKIGNDAFENCKLQSITLPAGLTTIGRKAFLSCTALQSIAIPASVISIEDYAFEDCTALTEVTVAWDTPLDIPAYVFHHVTLLNVTLRVPAGKMPAYKAEAVWKNFGTITDGVLFFLAVSPATLSFVAAGETKPVTVTASGAWTAASDQSWLRLSKGSGTGNTTISVTAANYTGTAPRTAKVTFTSSSITQEVNVTQQGASAPPALAVSPATLSFVAAGEMKPIAVTSNTSWTVASDQPWLTVSPVSGTNDGTVNATAAAYTGTAPRTAKVTFTAGSITQEVNVTQQAASAPPALAVSPATLSFVAAGEMKPVTVTASGAWTAASDQSWLTLSTGSGTGNMTVNVTAANYTGTAPRTAKVTFTAGSVTQEVNVTQQSGNINMSRYITLTVQSGQPIQLAFRAAAAGTPVRVVSGSNTTDVTVNATGVYWSPDQNFTSDGTTMTVYGDITGFGCSGNGANLTALDVSHNTQLEDLYCQNNDLTALDVSACTQLDWLECDNNRILALDLSHNTQLEGLGCSGNQLKALDVSACTQLKKRLNCFNNNFSKAALNRLYCSLPDRTSTTEGKIRPAYDATDAGHADVLASSGSIATGKNWKVQYYSGGSDIPTTGTKTCGPDFAVTPETVDITFAGETKPLTVAASEAWTARCDAPWITLSAASGTGDGTITVTAPAYADEWPR")
nchar("CSKLQSITLPASLTKICTALQSITLPASLTHICTALQSITLPAALTDI")
48/1013
nchar("CSKLQSITLPASLTKI")
nchar("CTALQSITLPAALTDI")
nchar("CKSLTDITLPKGLTSIGDYAF")
nchar("VPEGITSICDAAFEGRSSLISVTFPATLTSIGNYAFCGCTSLRSITLPASLTSIGQEAFNGCSALASV")
21/68
nchar("CKSLTSITLPESLTII")
nchar("CSSLSSIDLPAGLTAINNHAF")
tolower ("COMPLEMENTARY APPROACHES FOR STUDYING IMMUNE CELL HETEROGENEITY: BEYOND SINGLE-CELL RNA SEQUENCING")
45*5+40*2
360-305
40*7
5525-5234
291/7
12*4
232/19
12*19*25
25*12*19
25*12*18
365/7
25*10*19
25*12*19
20*12*19
4.5*5
22.5*12*19
5700-5234
52-6
25*12*19
5700-5234
466/10
466/12
466/12
25*12*20
6000-5234
766/20
25*(9/28)+35*(11/28)+45*(8/28)
26*(9/28)+36*(11/28)+45*(8/28)
30*(9/28)+38*(11/28)+45*(8/28)
30*(9/28)+38*(11/28)+46*(8/28)
32*(9/28)+38*(11/28)+46*(8/28)
32/9
38/11
32/6
38/6
46/6
32/7
46/7
38/7
5.428571860
5.428571*60
(32/7)*60
(46/7)*60
325-60
265-120
260-325
280+60
325-45-45-70-45
90+30+45
90+30+45-325
90+30+45+90-325
12*4*5
24*12*4*5
5279-23
5256-5760
504/19
38-22.3
1500*36
2010 - 1966
2010 - 1976
5760-5404
356/7
1+0.5+1+0.5+2+1+4+2+0.5+1+7.5
1.5+1.5+2+1+4+2+1.5+7.5+1.5+1
2023-1986
52*0.37
38.5*0.75
leveneTest(chicks_time10, chicks_time20)
library(car)
leveneTest(chicks_time10, chicks_time20)
data(ChickWeight)
leveneTest(chicks_time10, chicks_time20)
source("~/.active-rstudio-document", echo=TRUE)
# Subset the data for weeks 10 and 20
chicks_time10 <- ChickWeight$weight[ChickWeight$Time == 10]
chicks_time20 <- ChickWeight$weight[ChickWeight$Time == 20]
# Perform the t-test
t_result <- t.test(chicks_time10, chicks_time20)
leveneTest(chicks_time10, chicks_time20)
all_weights <- c(chicks_time10, chicks_time20)
group <- factor(c(rep("time10", length(chicks_time10)), rep("time20", length(chicks_time20))))
leveneTest(all_weights, group)
anova_result <- aov(weight ~ Diet, data = ChickWeight)
leveneTest(weight ~ Diet, data = ChickWeight)
eta_sq = sum(anova_result[[1]]) / (sum(anova_result[[1]]) + sum(anova_result[[2]]))
eta_sq
View(ChickWeight)
plot(ChickWeight$Time, ChickWeight$weight, main = "Chick Weight vs. Time", xlab = "Time", ylab = "Weight")
# Compute correlation
cor_value <- cor(ChickWeight$weight, ChickWeight$Time)
# Perform linear regression
regression_model <- lm(weight ~ Time, data = ChickWeight)
# Add regression line to plot
abline(regression_model, col = "red")
summary(regression_model)$r.squared
confint(regression_model)
data(ChickWeight)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
Error in leveneTest(all_weights, group) :
all_weights <- c(chicks_time10, chicks_time20)
group <- factor(c(rep("time10", length(chicks_time10)), rep("time20", length(chicks_time20))))
leveneTest(all_weights, group)
library(tidyverse)
leveneTest(all_weights, group)
library(car)
leveneTest(all_weights, group)
3.5*5+15+2+1.5+5+1.5
source("~/.active-rstudio-document", echo=TRUE)
t.test(mtcars$mpg[mtcars$am==1],mtcars$mpg[mtcars$am==0])
correlation <- cor(mtcars$mpg, mtcars$hp)
print(correlation)
correlation_test <- cor.test(mtcars$mpg, mtcars$hp)
print(correlation_test)
regression_model <- lm(mpg ~ hp, data=mtcars)
summary(regression_model)
regression_model <- lm(mpg ~ hp, data=mtcars)
anova_result <- aov(hp ~ as.factor(cyl), data = mtcars)
summary(anova_result)
anova_result
print(summary_result)
summary_result <- summary(anova_result)
print(summary_result)
p_value <- summary_result[[1]]["as.factor(cyl)", "Pr(>F)"]
p_value
# use the built-in mtcars dataset
data(mtcars)
plot(mtcars$mpg,mtcars$hp)
ggplot(mtcars,aes(x=hp,y=mpg))+
+ geom_point()
ggplot(mtcars,aes(x=hp,y=mpg,color=factor(cyl)))+
+ geom_point()
library(ggplot2)
# use the built-in mtcars dataset
data(mtcars)
plot(mtcars$mpg,mtcars$hp)
ggplot(mtcars,aes(x=hp,y=mpg))+
+ geom_point()
ggplot(mtcars,aes(x=hp,y=mpg))+
geom_point()
ggplot(mtcars,aes(x=hp,y=mpg,color=factor(cyl)))+
geom_point()
ggplot(mtcars,aes(x=hp,y=mpg,color=gear))+
geom_point()+
labs(x="horsepower",y="miles per gallon", title="horspower vs. mpg")+
theme_minimal()
# Compute a simple correlation matrix
cor_matrix <- cor(mtcars)
# Use heatmap() to create a heatmap of the correlation matrix
heatmap(cor_matrix, symm = TRUE)
heatmap(cor_matrix, Rowv = NA, Colv = NA, symm = TRUE)
heatmap(as.matrix(mtcars))
heatmap(as.matrix(scale(mtcars)))
heatmap(as.matrix(scale(mtcars)),margin=c(2,2))
# Create some sample data
set.seed(123) # For reproducibility
fake_RNAseq <- matrix(rnorm(100), nrow = 20, ncol = 20)
rownames(fake_RNAseq) <- paste("Gene", 1:20)
colnames(fake_RNAseq) <- paste("Sample", 1:20)
# Create the heatmap
heatmap(fake_RNAseq, col = heat.colors(256), scale="column", margins=c(5,5))
install.packages("VennDiagram")
library(VennDiagram)
# Define the sets
group1 <- c("A", "B", "C", "D")
group2 <- c("C", "D", "E", "F")
# Create a list of the sets
input <- list(set1 = group1, set2 = group2)
# Generate the Venn diagram
venn.plot <- venn.diagram(
x = input,
category.names = c("Set 1", "Set 2"),
filename = NULL
)
# Display the Venn diagram
grid.draw(venn.plot)
#we can also use mtcars
high_hp <- mtcars$hp > median(mtcars$hp)
high_wt <- mtcars$wt > median(mtcars$wt)
high_mpg <- mtcars$mpg > median(mtcars$mpg)
# Create a list of sets
sets <- list(
High_HP = which(high_hp),
High_WT = which(high_wt),
High_MPG = which(high_mpg)
)
# Generate a Venn diagram
venn.plot <- venn.diagram(
x = sets,
category.names = c("High HP", "High WT", "High MPG"),
filename = NULL
)
# Display the plot
grid.draw(venn.plot)
library(eulerr)
nicerVenn<-euler(sets)
install.packages(eulerr, dependencies = T)
install.packages("eulerr", dependencies = T)
library(eulerr)
nicerVenn<-euler(sets)
nicerVenn(fit)
fake.results <- data.frame(
gene = paste("Gene", 1:1000),
logFC = rnorm(1000, mean = 0, sd = 2),
pvalue = runif(1000, min = 0, max = 1)
)
fake.results$negLogPval <- -log10(fake.results$pvalue)
volcano_plot <- ggplot(fake.results, aes(x = logFC, y = negLogPval)) +
geom_point(alpha = 0.8) +
theme_minimal() +
xlab("Log2 Fold Change") +
ylab("-Log10 P-value") +
ggtitle("Volcano Plot on fake data") +
theme(plot.title = element_text(hjust = 0.5))
print(volcano_plot)
volcano_plot <- volcano_plot +
geom_point(data = subset(fake.results, abs(logFC) > threshold & negLogPval > -log10(0.05)),
aes(x = logFC, y = negLogPval), color = "red")
print(volcano_plot)
volcano_plot <- volcano_plot +
geom_point(data = subset(fake.results, abs(logFC) > threshold & negLogPval > -log10(0.05)),
aes(x = logFC, y = negLogPval), color = "red")
# Define the threshold value
threshold <- 2.5
volcano_plot <- volcano_plot +
geom_point(data = subset(fake.results, abs(logFC) > threshold & negLogPval > -log10(0.05)),
aes(x = logFC, y = negLogPval), color = "red")
print(volcano_plot)
volcano_plot <- volcano_plot +
geom_vline(xintercept = c(-threshold, threshold), linetype = "dashed") +
geom_hline(yintercept = -log10(0.05), linetype = "dashed")
print(volcano_plot)
install.packages("ggplot2","VennDiagram", "eulerr", dependencies = T)
install.packages("ggplot2","VennDiagram", "eulerr", dependencies = T)
install.packages("ggplot2", "VennDiagram", "eulerr", dependencies = T)
install.packages("ggplot2", "VennDiagram", "eulerr", dependencies = T)
source("~/.active-rstudio-document", echo=TRUE)
# Load the package
library(pwr)
# Define the parameters for the power analysis
effect_size <- 0.5  # assumed effect size (Cohen's d)
alpha <- 0.05       # significance level
power <- 0.8        # desired power
# Calculate the sample size needed
result <- pwr.t.test(d = effect_size, power = power, sig.level = alpha, type = "two.sample", alternative = "two.sided")
# Print the result
print(result)
# For a smaller effect size
smaller_effect_size <- 0.2
result_smaller_effect <- pwr.t.test(d = smaller_effect_size, power = power, sig.level = alpha, type = "two.sample", alternative = "two.sided")
# Print the result
print(result_smaller_effect)
# Print the result
print(result)
# Print the result
print(result)
# For a smaller effect size
smaller_effect_size <- 0.2
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
p_adjusted <- p.adjust(test_result$p.value, method = "BH")
print(p_adjusted)
source("~/.active-rstudio-document", echo=TRUE)
300-235
149.71/5
1045/5
1045+800+42.45+149.71
300-235
65-16.25
20*13
260-235.49
25.51-15.25
13*20
20/0.75
678-39+1
4000*0.18
4000*0.09
4000*0.14
4000*0.2
94*2
94-6+1
94-6+1+6
94+94
188-6
94+89
183-6
94+89
184-6
291-29+1
263-236
27+236
291-238+1
236+54
291-238
291-238+1
291-29
291-29+1
236-29+54
236-29+55
291-29
236-29+55
19+59
19-1+59
236-29+55
79-59
79-19+1
79-19-1
291-237-1
291-238+1
291-238
1722*197
200*250
125/150
library(ggplot2)
plot <- ggplot(mpg, aes(displ, hwy)) + geom_point()
View(plot)
ggplot(mpg, aes(displ, hwy)) + geom_point()
ggplot(mpg, aes(displ, hwy)) + geom_point() +
theme(
panel.background = element_rect(fill = "white"),
plot.margin = margin(2, 2, 2, 2, "cm"),
plot.background = element_rect(
fill = "grey90",
colour = "black",
linewidth = 1
)
)
ggplot(mpg, aes(displ, hwy)) + geom_point(
ggplot(mpg, aes(displ, hwy)) + geom_point()
ggplot(mpg, aes(displ, hwy)) + geom_point()
ggplot(mpg, aes(displ, hwy)) + geom_point()
ggplot(mpg, aes(displ, hwy)) + geom_point() +
theme(
panel.background = element_rect(fill = "white"),
plot.margin = margin(2, 2, 2, 2, "cm"),
plot.background = element_rect(
fill = "grey90",
colour = "black",
linewidth = 1
)
)
library(ggplot2)
ggplot(mpg, aes(displ, hwy)) + geom_point() +
theme(
panel.background = element_rect(fill = "white"),
plot.margin = margin(2, 2, 2, 2, "cm"),
plot.background = element_rect(
fill = "grey90",
colour = "black",
linewidth = 1
)
)
data <- c(1,2,3)
p <- ggplot(mpg, aes(displ, hwy)) + geom_point() +
theme(
panel.background = element_rect(fill = "white"),
plot.margin = margin(2, 2, 2, 2, "cm"),
plot.background = element_rect(
fill = "grey90",
colour = "black",
linewidth = 1
)
)
p2 <- ggplot(mpg, aes(displ, hwy)) + geom_point()
p
p2
p
115*14.58*1.15
1928-1726
745*0.6
2095*0.6
2900*0.8
2500*0.8
7*15+185
290-50
setwd("~/Desktop/302005/PlateletSubpop-ML-ScTranscriptomics")
sample_id <- read.csv("Supp_Table3.csv")
sample_id$Outcome <- factor(sample_id$Outcome,
levels = c("HC", "S", "FT", "Unknown"),
labels = c("Healthy Control", "Survivor", "Fatal", "Unknown"))
sample_id$Clusters <-  factor(sample_id$Clusters,levels= c("C0", "C1", "C2", "C3", "C4", "C5", "C6",
"C7","C8", "C9", "C10", "C11", "C12"))
setwd("~/Desktop/302005")
dpi = 300
png(file = "~/Desktop/302005/Fig4D_Outcome_cluster_density.png", width = 6, height = 4, units = 'in',res = 300)
ggplot(sample_id, aes(fill=Outcome, y=Frequency, x=Clusters)) +
geom_bar(position="stack", stat="identity") +
scale_fill_manual(values = c('#FFD16F', '#A1CEED', '#456681', '#ad3c53')) +
theme(axis.text=element_text(size=16, face="bold")) + xlab("Cluster") + ylab("Percentage") +
guides(fill=guide_legend(title="Outcome")) +
theme_minimal()
library(tidyverse)
library(dplyr)
library(tidyr)
library(ggplot2)
library(rstatix)
library(ggpubr)
dpi = 300
png(file = "~/Desktop/302005/Fig4D_Outcome_cluster_density.png", width = 6, height = 4, units = 'in',res = 300)
ggplot(sample_id, aes(fill=Outcome, y=Frequency, x=Clusters)) +
geom_bar(position="stack", stat="identity") +
scale_fill_manual(values = c('#FFD16F', '#A1CEED', '#456681', '#ad3c53')) +
theme(axis.text=element_text(size=16, face="bold")) + xlab("Cluster") + ylab("Percentage") +
guides(fill=guide_legend(title="Outcome")) +
theme_minimal()
invisible(dev.off())
dpi = 300
png(file = "~/Desktop/302005/Fig4D_Outcome_cluster_density.png", width = 6, height = 4, units = 'in',res = 300)
ggplot(sample_id, aes(fill=Outcome, y=Frequency, x=Clusters)) +
geom_bar(position="stack", stat="identity") +
scale_fill_manual(values = c('#A1CEED', '#456681', '#ad3c53', '#FFD16F')) +
theme(axis.text=element_text(size=16, face="bold")) + xlab("Cluster") + ylab("Percentage") +
guides(fill=guide_legend(title="Outcome")) +
theme_minimal()
invisible(dev.off())
dpi = 300
png(file = "~/Desktop/302005/Fig4D_Outcome_cluster_density.png", width = 6, height = 4, units = 'in',res = 300)
ggplot(sample_id, aes(fill=Outcome, y=Frequency, x=Clusters)) +
geom_bar(position="stack", stat="identity") +
scale_fill_manual(values = c('#FFD16F''#A1CEED', '#456681', '#ad3c53')) +
setwd("~/Desktop/302005/PlateletSubpop-ML-ScTranscriptomics")
sample_id <- read.csv("Supp_Table3.csv")
sample_id$Outcome <- factor(sample_id$Outcome,
levels = c("HC", "S", "FT", "Unknown"),
labels = c("Unknown", "Healthy Control", "Survivor", "Fatal"))
sample_id$Clusters <-  factor(sample_id$Clusters,levels= c("C0", "C1", "C2", "C3", "C4", "C5", "C6",
"C7","C8", "C9", "C10", "C11", "C12"))
dpi = 300
png(file = "~/Desktop/302005/Fig4D_Outcome_cluster_density.png", width = 6, height = 4, units = 'in',res = 300)
ggplot(sample_id, aes(fill=Outcome, y=Frequency, x=Clusters)) +
geom_bar(position="stack", stat="identity") +
scale_fill_manual(values = c('#FFD16F''#A1CEED', '#456681', '#ad3c53')) +
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
write.csv(wide_data, "/bigdata/godziklab/shared/Xinru/302005/05-2024/Table2.csv")
data <- read.csv("~/Desktop/Table2.csv")
library(dplyr)
library(knitr)
library(kableExtra)
install.packages("kableExtra")
library(dplyr)
library(knitr)
library(kableExtra)
data <- read.csv("~/Desktop/Table2.csv")
# Splitting Mean and SE into separate rows for formatting
data_formatted <- data %>%
mutate(across(-Pathway_Module, ~str_replace_all(.x, "\\(([^)]+)\\)", "\n($1)"))) %>%
kable("html", escape = F) %>%
kable_styling(bootstrap_options = c("striped", "hover"), full_width = F) %>%
column_spec(1, bold = T)
names(data)
# Splitting Mean and SE into separate rows for formatting
data_formatted <- data %>%
mutate(across(-Pathway.Module, ~str_replace_all(.x, "\\(([^)]+)\\)", "\n($1)"))) %>%
kable("html", escape = F) %>%
kable_styling(bootstrap_options = c("striped", "hover"), full_width = F) %>%
column_spec(1, bold = T)
# Printing the table
print(data_formatted)
80-18
62*0.37
22.94 + 18
